<?php

//查询结果的返回类型
const RETURN_QUERY_RESULT_ONE = 0;//取得一个数据
const RETURN_QUERY_RESULT_COL = 0;//取得一列数据
const RETURN_QUERY_RESULT_ROW = 0;//取得一行数据
const RETURN_QUERY_RESULT_ALL = 0;//取得全部数据

//库名、表名规则的解析类型
const PARSE_TYPE_DB = 1;
const PARSE_TYPE_TABLE = 2;
const PARSE_TYPE_PARTITION = 3;

//映射规则，以MAP_RULE_开头
//分库强调的是分散请求以降低数据库压力
//可能的场景有：功能拆分、IP区域拆分、人群拆分(手机号段、身份证地址码、身份证出生日期码[按年龄展示])

//分库分表需要一个稳定的对照参数

//例如手机号码，对于作为用户分表来说，用户账号就是手机号码，用户必然会输入，此时根据规则可精确定位到对应分表

//又如日期，常用于财报、期刊之类的分表，其周期是确定的，请求可带日期，也可根据系统时间取得，因此是稳定的参数

//另外请求的IP地址，由于需要通过IP地址库转换为地址代码，并根据具体地域进行分表分库，这个过程有太多的未知因素，因此是不稳定的对照参数
//可用作补充规则，不建议作为关键规则。如地域及依赖数据的切换，它是延后的操作，而非首选

//身份证号码是与用户关联的，然而其复杂度决定了它作为一个账号名的可能性不大（教育、安全类型的系统可能有使用），因此它也不是稳定的对照参数
//可用作补充规则，由于其信息的精确性，可以精确的划分地域、年龄、性别，对于做精确的数据推送有极大参考价值

//容量分库分表，需要获取库、表的容量用于判断是否新建库、表，此操作必然降低数据库写入性能，因此容量分库分表需要谨慎选择
//这里建议使用手动指定容量下标，由手动变更下标的方式来变更容量库或容量表，避免写入时作判断
//（若非激增型数据，手动操作是可行的，而对于激增型数据，单纯的容量切分也并非最优方案）

const MAP_RULE_CONSTANT = 99;//固定

//const MAP_RULE_CAPACITY = 10;//按容量没有理想方案前建议不用

const MAP_RULE_MOBILE_SEGMENT = 21;//手机号段，即1~3位，通常用于分表、分区值
const MAP_RULE_MOBILE_FOURTH = 22;//手机号段第4位，通常用于号段分表下的分区值

const MAP_RULE_YEAR = 31;//年份，通常用于分表
const MAP_RULE_MONTH = 32;//月份，通常用于分区值


const T_DB_MAP_NOT_EXISTS = '尚未配置该库名映射';
const T_TABLE_MAP_NOT_EXISTS = '尚未配置该表名映射';
const T_PARTITION_MAP_NOT_EXISTS = '尚未配置该分区映射';








